{"ast":null,"code":"import { takeLatest, call, put, all } from 'redux-saga/effects';\nimport { firestore, convertCollectionsToMap } from '../../firebase/firebase.utils';\nimport { fetchCollectionSuccess, fetchCollectionFailure } from './shop.actions';\nimport ShopActionTypes from './shop.type';\n\nfunction* fetchCollectionAsync() {\n  try {\n    const collectionRef = firestore.collection('collections');\n    const snapShot = yield collectionRef.get();\n    const collectionsToMap = yield call(convertCollectionsToMap, snapShot);\n    yield put(fetchCollectionSuccess(collectionsToMap));\n  } catch (error) {\n    yield put(fetchCollectionFailure(error.message));\n  }\n}\n\nexport function* fetchCollectionStart() {\n  yield takeLatest(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionAsync);\n}\nexport default function* shopSagas() {\n  yield all([call(fetchCollectionStart)]);\n}","map":{"version":3,"sources":["/home/aubrey/e-commerce-app/client/src/redux/shop/shop.saga.js"],"names":["takeLatest","call","put","all","firestore","convertCollectionsToMap","fetchCollectionSuccess","fetchCollectionFailure","ShopActionTypes","fetchCollectionAsync","collectionRef","collection","snapShot","get","collectionsToMap","error","message","fetchCollectionStart","FETCH_COLLECTIONS_START","shopSagas"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,GAAhC,QAA2C,oBAA3C;AACA,SAASC,SAAT,EAAoBC,uBAApB,QAAmD,+BAAnD;AACA,SAASC,sBAAT,EAAiCC,sBAAjC,QAA+D,gBAA/D;AAGA,OAAOC,eAAP,MAA4B,aAA5B;;AAEA,UAAUC,oBAAV,GAAiC;AAC/B,MAAI;AACF,UAAMC,aAAa,GAAGN,SAAS,CAACO,UAAV,CAAqB,aAArB,CAAtB;AACA,UAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAvB;AACA,UAAMC,gBAAgB,GAAG,MAAMb,IAAI,CAACI,uBAAD,EAA0BO,QAA1B,CAAnC;AACA,UAAMV,GAAG,CAACI,sBAAsB,CAACQ,gBAAD,CAAvB,CAAT;AACD,GALD,CAKE,OAAOC,KAAP,EAAc;AACd,UAAMb,GAAG,CAACK,sBAAsB,CAACQ,KAAK,CAACC,OAAP,CAAvB,CAAT;AACD;AACF;;AAED,OAAO,UAAUC,oBAAV,GAAiC;AACtC,QAAMjB,UAAU,CAACQ,eAAe,CAACU,uBAAjB,EAA0CT,oBAA1C,CAAhB;AACD;AAGD,eAAe,UAAUU,SAAV,GAAsB;AACnC,QAAMhB,GAAG,CAAC,CAACF,IAAI,CAACgB,oBAAD,CAAL,CAAD,CAAT;AACD","sourcesContent":["import { takeLatest, call, put, all } from 'redux-saga/effects';\nimport { firestore, convertCollectionsToMap } from '../../firebase/firebase.utils'\nimport { fetchCollectionSuccess, fetchCollectionFailure } from './shop.actions'\n\n\nimport ShopActionTypes from './shop.type';\n\nfunction* fetchCollectionAsync() {\n  try {\n    const collectionRef = firestore.collection('collections');\n    const snapShot = yield collectionRef.get()\n    const collectionsToMap = yield call(convertCollectionsToMap, snapShot)\n    yield put(fetchCollectionSuccess(collectionsToMap))\n  } catch (error) {\n    yield put(fetchCollectionFailure(error.message))\n  }\n}\n\nexport function* fetchCollectionStart() {\n  yield takeLatest(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionAsync)\n}\n\n\nexport default function* shopSagas() {\n  yield all([call(fetchCollectionStart)])\n}"]},"metadata":{},"sourceType":"module"}